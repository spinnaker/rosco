ext {
  springConfigLocation = System.getProperty('spring.config.location', "${System.getProperty('user.home')}/.spinnaker/")
}

tasks.withType(org.springframework.boot.gradle.run.BootRunTask) {
  systemProperty('spring.config.location', project.springConfigLocation)
}

apply plugin: 'spring-boot'
apply plugin: 'nebula.ospackage'

configurations.all {
  exclude group: 'javax.servlet', module: 'servlet-api'
  exclude group: "org.slf4j", module: "slf4j-log4j12"
}

dependencies {
  compile project(":rosco-core")
  compile project(":rosco-metrics")
  compile spinnaker.dependency('korkStackdriver')
  spinnaker.group("bootWeb")
}

applicationName = 'rosco'
applicationDefaultJvmArgs = ["-Djava.security.egd=file:/dev/./urandom"]
applicationDistribution.from(project.file('config')) {
  into "config"
}

sourceSets {
  main {
    resources {
      srcDir 'src/main/resources'
      srcDir 'config'
    }
  }
}

jar {
  doFirst { 
    exclude "${rootProject.name}.yml"
  }
}

startScripts {
  defaultJvmOpts = applicationDefaultJvmArgs + ["-Dspring.config.location=/opt/spinnaker/config/"]
  doLast {
    unixScript.text = unixScript.text.replace('DEFAULT_JVM_OPTS=', '''\
        if [ -f /etc/default/spinnaker ]; then
          set -a
          . /etc/default/spinnaker
          set +a
        fi
        DEFAULT_JVM_OPTS='''.stripIndent())
    unixScript.text = unixScript.text.replace('CLASSPATH=$APP_HOME', 'CLASSPATH=$APP_HOME/config:$APP_HOME')
    windowsScript.text = windowsScript.text.replace('set CLASSPATH=', 'set CLASSPATH=%APP_HOME%\\config;')
  }
}

String toVers(String v) {
  int idx = v.indexOf('-')
  if (idx != -1) {
    return v.substring(0, idx)
  }
  return v
}

ospackage {
  packageName = "spinnaker-" + project.applicationName
  version = toVers(project.version.toString())
  release '3'
  os = LINUX

  // installer scripts
  postInstall = file('pkg_scripts/postInstall.sh')
  postUninstall = file('pkg_scripts/postUninstall.sh')

  from "${project.buildDir}/install/${project.applicationName}"  
    into "/opt/${project.applicationName}"
  
  from(file('etc/init/rosco.conf')) {
    into('/etc/init')
    user = 'root'
    permissionGroup = 'root'
    fileType = CONFIG | NOREPLACE
  }

  from(file('etc/logrotate.d/rosco')) {
    into('/etc/logrotate.d')
    user = 'root'
    permissionGroup = 'root'
    fileMode = 0644
    fileType = CONFIG | NOREPLACE
  }

  configurationFile('/opt/rosco/config/rosco.yml')
  configurationFile('/opt/rosco/config/packer/aws-chroot.json')
  configurationFile('/opt/rosco/config/packer/aws-ebs.json')
  configurationFile('/opt/rosco/config/packer/azure-linux.json')
  configurationFile('/opt/rosco/config/packer/gce.json')
  configurationFile('/opt/rosco/config/packer/install_packages.sh')

  from('../docker') {
    into "/opt/${project.applicationName}/docker"
  }  
}

buildDeb {
  dependsOn installDist
}
