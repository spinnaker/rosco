ext {
  springConfigLocation = System.getProperty('spring.config.location', "${System.getProperty('user.home')}/.spinnaker/")
  repackage = System.getProperty('springBoot.repackage', "false")
}

tasks.withType(org.springframework.boot.gradle.run.BootRunTask) {
  systemProperty('spring.config.location', project.springConfigLocation)
}

apply plugin: 'org.springframework.boot'
apply plugin: 'spinnaker.package'

configurations.all {
  exclude group: 'javax.servlet', module: 'servlet-api'
  exclude group: "org.slf4j", module: "slf4j-log4j12"
}

dependencies {
  compile project(":rosco-core")
  compile project(":rosco-manifests")
  compile spinnaker.dependency("kork")
  compile spinnaker.dependency("korkWeb")
  compile spinnaker.dependency('korkStackdriver')
  compile spinnaker.dependency("korkSwagger")
  compile spinnaker.dependency("spectatorReg")
  spinnaker.group("bootWeb")
}

ospackage {
  from('config/packer') {
    into '/opt/rosco/config/packer'
  }

  configurationFile('/opt/rosco/config/rosco.yml')
  configurationFile('/opt/rosco/config/packer/aws-chroot.json')
  configurationFile('/opt/rosco/config/packer/aws-ebs.json')
  configurationFile('/opt/rosco/config/packer/azure-linux.json')
  configurationFile('/opt/rosco/config/packer/gce.json')
  configurationFile('/opt/rosco/config/packer/install_packages.sh')

  from('../docker') {
    into "/opt/${project.applicationName}/docker"
  }  
}

buildDeb {
  requires('unzip')
}

buildRpm {
  requires('unzip')
}

tasks.bootRepackage.enabled = Boolean.valueOf(project.repackage)
